# read commit message. 'deploy dev'
# deploy to stg env
name: deploy dev
on: push

env:
  IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/hushhub-backend:${{ github.sha }}
  CONTAINER_NAME: "hushhub-backend"
  CONTAINER_PORT: 8080
  HOST_PORT: 8080
  ENV_FILE: .env

jobs:
  check_msg:
    runs-on: [ ubuntu-latest ]
    outputs:
      run_next: ${{ steps.msg_checker.outputs.run_next }}
    steps:
      - name: check commit message
        id: msg_checker
        if: contains(github.event.head_commit.message, 'deploy-dev')
        run: |
          echo "run_next=true" >> "$GITHUB_OUTPUT"

  deploy_dev:
    # if: ${{ always() && contains(join(needs.*.result, ','), 'ok') }}
    if: contains(needs.check_msg.outputs.run_next, 'true')
    needs: check_msg
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: cd app ; docker build -t ${{env.IMAGE_TAG}} .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{env.IMAGE_TAG}}
        
      - name: Write SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.DEV_SSH_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_SERVER_IP }} > ~/.ssh/known_hosts
      
      - name: Download the .env file
        run: |
          echo "${{ secrets.DEV_ENV_VARS }}" > .env
      
      - name: provision environment variable file
        run: |
          echo "send the .env file to the server first"
          scp .env ec2-user@${{ secrets.DEV_SERVER_IP }}:~/
          ssh ec2-user@${{ secrets.DEV_SERVER_IP }} 'echo fromgha > fromgha.txt'

      - name: run container
        run: |
          ssh ec2-user@${{ secrets.DEV_SERVER_IP }} \
            'echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login --username=${{ secrets.DOCKERHUB_USERNAME }} --password-stdin && \
            sudo docker stop --quiet ${{env.CONTAINER_NAME}} || true && \
            sudo docker rm ${{env.CONTAINER_NAME}} || true && \
            sudo docker run --env-file ${{env.ENV_FILE}} -d --name ${{env.CONTAINER_NAME}} -p ${{env.HOST_PORT}}:${{env.CONTAINER_PORT}} --restart always ${{env.IMAGE_TAG}}'
